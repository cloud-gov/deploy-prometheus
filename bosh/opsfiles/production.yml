# Scrape tooling prometheus via federation
- type: replace
  path: /instance_groups/name=prometheus/jobs/name=prometheus2/properties/prometheus/scrape_configs/-
  value:
    job_name: federate
    honor_labels: true
    metrics_path: /federate
    params:
      match[]:
      - '{__name__=~"bosh_.*"}'
      - '{__name__=~"node_.*"}'
      - '{__name__=~"nessus_.*"}'
      - '{__name__=~"concourse.*"}'
    static_configs:
    - targets:
      - prometheus-tooling.service.cf.internal:9090

# Add tooling prometheus
- type: replace
  path: /instance_groups/-
  value:
    name: prometheus-tooling
    instances: 1
    vm_type: ((environment))-prometheus-large
    persistent_disk_type: ((environment))-prometheus-tooling
    stemcell: default
    azs: ((azs))
    networks:
    - name: ((environment))-monitoring
    env:
      persistent_disk_fs: xfs
    jobs:
    - name: prometheus2
      release: prometheus
      properties:
        prometheus:
          external_labels:
            federate: prometheus-tooling
          scrape_configs:
          - job_name: prometheus
            static_configs:
            - targets:
              - localhost:9090
          - job_name: bosh
            scrape_interval: 1m
            scrape_timeout: 1m
            static_configs:
            - targets:
              - localhost:9190
          - job_name: concourse
            file_sd_configs:
            - files:
              - /var/vcap/store/bosh_exporter/bosh_target_groups.json
            relabel_configs:
            - source_labels: [__meta_bosh_job_process_name]
              regex: atc
              action: keep
            - source_labels: [__address__]
              regex: "(.*)"
              target_label: __address__
              replacement: "${1}:9110"
            - source_labels: [__meta_bosh_deployment]
              regex: "(.*)"
              target_label: bosh_deployment
              replacement: "$1"
          - job_name: node
            file_sd_configs:
            - files:
              - /var/vcap/store/bosh_exporter/bosh_target_groups.json
            relabel_configs:
            - source_labels: [__meta_bosh_job_process_name]
              regex: node_exporter
              action: keep
            - source_labels: [__address__]
              regex: "(.*)"
              target_label: __address__
              replacement: "${1}:9100"
    - name: bosh_exporter
      release: prometheus
      properties:
        bosh_exporter:
          bosh:
            url: ((tooling-bosh-url))
            ca_cert: ((bosh-ca-cert))
            uaa:
              url: ((tooling-bosh-url)):8443
              client_id: ((tooling-bosh-client-id))
              client_secret: ((tooling-bosh-client-secret))
          metrics:
            environment: tooling

# Disambiguate prometheus jobs
- type: replace
  path: /instance_groups/name=prometheus/jobs/name=prometheus2/provides?
  value:
    prometheus: {as: prometheus-primary}
- type: replace
  path: /instance_groups/name=grafana/jobs/name=grafana/consumes?
  value:
    prometheus: {from: prometheus-primary}
- type: replace
  path: /instance_groups/name=nginx/jobs/name=nginx/consumes?
  value:
    prometheus: {from: prometheus-primary}

# instance types.
- type: replace
  path: /instance_groups/name=prometheus/vm_type
  value: m6i.xlarge
- type: replace
  path: /instance_groups/name=prometheus-tooling/vm_type
  value: m6i.large

# add some prod-only rules
# monitor Pages proxy
- type: replace
  path: /instance_groups/name=prometheus/jobs/name=prometheus2/properties/prometheus/custom_rules?/-
  value:
    name: pages-proxy
    rules:
    - alert: PagesProxyUnhealthy
      # get all the cf application instances with matching org, space, and app IDs. 
      # Subtract from that all the instances with matching org, space, app ids with state Running.
      # Take the minimum of that, and see if it's more than zero
      expr: min(cf_application_instances{organization_id="((pages_org_id))", space_id="((pages_proxy_space_id))", application_id="((pages_proxy_app_id))"} - cf_application_instances_running{state=~"STARTED", organization_id="((pages_org_id))", space_id="((pages_proxy_space_id))", application_id="((pages_proxy_app_id))"} ) > 0
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Pages proxy app unhealthy"
        description: "Reach out to Pages"
    - alert: PagesProxyCrashed
      # get all the cf application instances with matching org, space, and app IDs in state started. If there are zero, alert. 
      expr: sum(cf_application_instances_running{organization_id="((pages_org_id))", space_id="((pages_proxy_space_id))", application_id="((pages_proxy_app_id))"}) == 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Pages proxy app crashed"
        description: "Reach out to Pages"
